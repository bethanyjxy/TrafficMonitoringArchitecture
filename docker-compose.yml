services:
  flask-app:
    build: ./app
    container_name: flaskapp
    ports:
      - "5000:5000"
    volumes:
      - ./app:/app
    environment:
      FLASK_ENV: development
      POSTGRES_DB: traffic_db
      POSTGRES_USER: traffic_admin
      POSTGRES_PASSWORD: traffic_pass
      POSTGRES_HOST: postgres # Reference postgres by service name
    depends_on:
      - postgres
      - kafka
      - namenode
      - datanode
    networks:
      - hadoop-network

  postgres:
    image: postgis/postgis:16-3.4
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: traffic_db
      POSTGRES_USER: traffic_admin
      POSTGRES_PASSWORD: traffic_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hadoop-network

  airflow:
    container_name: airflow
    image: apache/airflow:latest
    ports:
      - "8081:8081"
    environment:
      LOAD_EX: "y"
      EXECUTOR: "LocalExecutor"
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://traffic_admin:traffic_pass@postgres:5432/traffic_db
    volumes:
      - ./app/airflow/dags:/usr/local/airflow/dags
      - ./app/airflow/logs:/usr/local/airflow/logs
    depends_on:
      - postgres
    networks:
      - hadoop-network
    command: webserver
    healthcheck:
      test: [ "CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]" ]
      interval: 30s
      timeout: 30s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - hadoop-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - hadoop-network

  namenode:
    image: apache/hadoop:3.3.5
    hostname: namenode
    command: [ "hdfs", "namenode" ]
    ports:
      - 9870:9870
    env_file:
      - ./config/hadoop.cfg
    environment:
      ENSURE_NAMENODE_DIR: "/tmp/hadoop-root/dfs/name"
    volumes:
      - /mnt/c/Users/betha/Desktop/TrafficMonitoringArchitecture:/mnt/TrafficMonitoringArchitecture
    networks:
      - hadoop-network

  datanode:
    image: apache/hadoop:3.3.5
    command: [ "hdfs", "datanode" ]
    env_file:
      - ./config/hadoop.cfg
    networks:
      - hadoop-network

  resourcemanager:
    image: apache/hadoop:3.3.5
    hostname: resourcemanager
    command: [ "yarn", "resourcemanager" ]
    ports:
      - 8088:8088
    env_file:
      - ./config/hadoop.cfg
    volumes:
      - ./test.sh:/opt/test.sh
    networks:
      - hadoop-network

  nodemanager:
    image: apache/hadoop:3.3.5
    command: [ "yarn", "nodemanager" ]
    env_file:
      - ./config/hadoop.cfg
    networks:
      - hadoop-network

  spark:
    container_name: spark
    image: bitnami/spark:latest
    ports:
      - "8080:8080" # Spark UI
      - "7077:7077" # Spark master port
    environment:
      - SPARK_MODE=master
    volumes:
      - /app/spark:/opt/spark/data
    depends_on:
      - namenode
    networks:
      - hadoop-network

networks:
  hadoop-network:
    # Single network for all services
    driver: bridge

volumes:
  postgres_data: {}
  namenode-data: {}
  datanode-data: {}
